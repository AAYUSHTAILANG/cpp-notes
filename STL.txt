			STL
			===
-Standard Template Library
-The Standard Template Library (STL) is a powerful set of C++ template classes to provide general-purpose classes and functions with templates that implement many popular and commonly used algorithms and data structures like vectors, lists, queues, and stacks.

Key components of the STL include:
----------------------------------
1)Containers:
-------------
Vector (std::vector): Dynamic array, similar to an array but with dynamic size.
List (std::list): Doubly-linked list.
Deque (std::deque): Double-ended queue, a dynamic array with fast insertions/removals at both ends.
Queue (std::queue): A first-in, first-out (FIFO) data structure.
Stack (std::stack): A last-in, first-out (LIFO) data structure.
Set (std::set): Collection of unique, ordered elements.
Map (std::map): Collection of key-value pairs, where keys are unique and ordered.

2)Algorithms:
-------------
The STL provides numerous generic algorithms (functions) that operate on containers. Examples include sort, find, transform, accumulate, etc.
Algorithms can be used with different containers because they operate through iterators.

3)Iterators:
------------
Iterators act as a bridge between containers and algorithms, allowing algorithms to work with different types of containers.
Examples include begin(), end(), rbegin(), rend(), etc.

4)Function Objects (Functors):
-----------------------------
Functors are objects that can be called as if they were a function.
They are often used as arguments for algorithms that require a function, such as std::sort.

---------------------------------------------------------
VECTOR:
-------
-Dynamic growing array

ex:
---
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    // Create a vector of integers
    std::vector<int> numbers = {5, 2, 8, 1, 9, 3};

    // Sort the vector
    std::sort(numbers.begin(), numbers.end());

    // Print the sorted vector
    for (int num : numbers) {
        std::cout << num << " ";
    }

    return 0;
}

---------------------------------------------------------

#include <iostream>
#include <vector>
using namespace std;

int main()
{
    vector<int> v(5);//Declares a vector of integers with initial capacity 5

    vector<int>::iterator i;//Declares an iterator (i) for the vector, which will be used to traverse and manipulate the vector.

    int n=1;
    
    for(n=1,i=v.begin();i!=v.end();i++,n++)
    *i=n;
    
    v.push_back(23);// Adds another element (23) to the end of the vector

    cout<<"Size"<<v.size()<<endl;
    cout<<"Capacity"<<v.capacity();
    
}

OUTPUT:
-------
Size: 6
Capacity: 10

Explaination:
-------------
-size()->total no of elements of vector.
-capacity()->amount of space required by vector currently.
-Initially, the vector v has a size of 5 (filled with values 1, 2, 3, 4, 5)
-After pushing back the value 23, the vector's size becomes 6.
---------------------------------------------------------